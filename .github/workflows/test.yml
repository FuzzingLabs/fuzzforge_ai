name: Tests

on:
  push:
    branches: [ main, master, develop, feature/** ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy

      - name: Run ruff
        run: ruff check backend/src backend/toolbox --output-format=github

      - name: Run mypy (continue on error)
        run: mypy backend/src backend/toolbox || true
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest pytest-asyncio pytest-cov pytest-xdist

      - name: Run unit tests
        working-directory: ./backend
        run: |
          pytest tests/unit/ \
            -v \
            --cov=toolbox/modules \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html \
            -n auto

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-backend

      - name: Upload coverage HTML
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./backend/htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fuzzforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest pytest-asyncio

      - name: Start services (Temporal, MinIO)
        run: |
          docker-compose -f docker-compose.yml up -d temporal minio
          sleep 30

      - name: Run integration tests
        working-directory: ./backend
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fuzzforge_test
          TEMPORAL_ADDRESS: localhost:7233
          MINIO_ENDPOINT: localhost:9000

      - name: Shutdown services
        if: always()
        run: docker-compose down

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "Integration tests failed"
            exit 1
          fi
          echo "All tests passed!"
