"""Helpers for loading project-scoped environment variables."""

from __future__ import annotations

import os
from pathlib import Path
from typing import Optional

try:
    from dotenv import load_dotenv
except ImportError:  # pragma: no cover - optional dependency
    load_dotenv = None  # type: ignore


def load_project_env(start_dir: Optional[Path] = None, *, override: bool = False) -> None:
    """Load `.fuzzforge/.env` walking up from the given directory.

    When running the AI agent outside of the CLI entrypoints we still want to
    honour the project-scoped environment file generated by `fuzzforge init` so
    credentials (Cognee, LLM provider, etc.) are available.
    """

    root = Path(start_dir) if start_dir else Path.cwd()

    # Check the current directory first, then walk parents until we find a
    # project marker.
    for directory in [root] + list(root.parents):
        env_file = directory / ".fuzzforge" / ".env"
        if env_file.exists():
            if load_dotenv:
                load_dotenv(env_file, override=override)
            else:  # pragma: no cover - best effort fallback when python-dotenv missing
                try:
                    for line in env_file.read_text(encoding="utf-8").splitlines():
                        stripped = line.strip()
                        if not stripped or stripped.startswith("#"):
                            continue
                        if "=" not in stripped:
                            continue
                        key, value = stripped.split("=", 1)
                        if override or key.strip() not in os.environ:
                            os.environ[key.strip()] = value.strip()
                except Exception:
                    pass
            break


__all__ = ["load_project_env"]
